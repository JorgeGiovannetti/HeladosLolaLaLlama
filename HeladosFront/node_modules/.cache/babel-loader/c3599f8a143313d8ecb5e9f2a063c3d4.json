{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\";\nimport { useControllableState, useDisclosure, useFocusOnHide, useId, useIds, useOutsideClick, useShortcut, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { createContext, getValidChildren, mergeRefs } from \"@chakra-ui/react-utils\";\nimport { addItem, callAllHandlers, dataAttr, determineLazyBehavior, focus, getNextIndex, getNextItemFromSearch, getOwnerDocument, getPrevIndex, isActiveElement, isArray, isString, normalizeEventKey, removeItem } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar [MenuProvider, useMenuContext] = createContext({\n  strict: false,\n  name: \"MenuContext\"\n});\nexport { MenuProvider, useMenuContext };\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\n\nexport function useMenu(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\"\n  } = props,\n      popperProps = _objectWithoutPropertiesLoose(props, [\"id\", \"closeOnSelect\", \"closeOnBlur\", \"autoSelect\", \"isLazy\", \"isOpen\", \"defaultIsOpen\", \"onClose\", \"onOpen\", \"placement\", \"lazyBehavior\"]);\n\n  var {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp\n  });\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n\n  var menuRef = React.useRef(null);\n  var buttonRef = React.useRef(null);\n  useOutsideClick({\n    ref: menuRef,\n    handler: event => {\n      var _buttonRef$current;\n\n      if (isOpen && closeOnBlur && !((_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n\n  var popper = usePopper(_extends({}, popperProps, {\n    placement\n  }));\n  var [focusedIndex, setFocusedIndex] = React.useState(-1);\n  /**\n   * Context to register all menu item nodes\n   */\n\n  var domContext = useDescendants();\n  /**\n   * Focus the button when we close the menu\n   */\n\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true\n  });\n  /**\n   * Generate unique ids for menu's list and button\n   */\n\n  var [buttonId, menuId] = useIds(id, \"menu-button\", \"menu-list\");\n  var openAndFocusMenu = React.useCallback(() => {\n    onOpen();\n    focus(menuRef.current, {\n      nextTick: true\n    });\n  }, [onOpen, menuRef]);\n  var openAndFocusFirstItem = React.useCallback(() => {\n    onOpen();\n    setFocusedIndex(0);\n  }, [onOpen, setFocusedIndex]);\n  var openAndFocusLastItem = React.useCallback(() => {\n    onOpen();\n    setFocusedIndex(domContext.descendants.length - 1);\n  }, [onOpen, setFocusedIndex, domContext.descendants]);\n  var refocus = React.useCallback(() => {\n    var _menuRef$current, _domContext$descendan;\n\n    var doc = getOwnerDocument(menuRef.current);\n    var hasFocusWithin = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(doc.activeElement);\n    var shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    var el = (_domContext$descendan = domContext.descendants[focusedIndex]) == null ? void 0 : _domContext$descendan.element;\n    focus(el);\n  }, [isOpen, focusedIndex, domContext.descendants]);\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    domContext,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior\n  };\n}\nexport function useMenuButton(props, externalRef) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var menu = useMenuContext();\n  var {\n    isOpen,\n    onClose,\n    autoSelect,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    openAndFocusMenu\n  } = menu;\n  var onClick = React.useCallback(() => {\n    if (isOpen) {\n      onClose();\n    } else {\n      var action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu;\n      action();\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu]);\n  var onKeyDown = React.useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n  return _extends({}, props, {\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\n\nexport function useMenuList(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (ref === void 0) {\n    ref = null;\n  }\n\n  var menu = useMenuContext();\n\n  if (!menu) {\n    throw new Error(\"useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>\");\n  }\n\n  var {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    domContext: {\n      descendants\n    },\n    isLazy,\n    lazyBehavior\n  } = menu;\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n\n  var onCharacterPress = useShortcut({\n    preventDefault: event => event.key !== \" \"\n  });\n  var onKeyDown = React.useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Tab: event => {\n        event.preventDefault();\n      },\n      Escape: onClose,\n      ArrowDown: () => {\n        var nextIndex = getNextIndex(focusedIndex, descendants.length);\n        setFocusedIndex(nextIndex);\n      },\n      ArrowUp: () => {\n        var prevIndex = getPrevIndex(focusedIndex, descendants.length);\n        setFocusedIndex(prevIndex);\n      }\n    };\n    var fn = keyMap[eventKey];\n\n    if (fn) {\n      event.preventDefault();\n      fn(event);\n      return;\n    }\n\n    var characterHandler = onCharacterPress(character => {\n      /**\n       * Typeahead: Based on current character pressed,\n       * find the next item to be selected\n       */\n      var nextItem = getNextItemFromSearch(descendants, character, node => {\n        var _node$element;\n\n        return ((_node$element = node.element) == null ? void 0 : _node$element.textContent) || \"\";\n      }, descendants[focusedIndex]);\n\n      if (nextItem) {\n        var index = descendants.indexOf(nextItem);\n        setFocusedIndex(index);\n      }\n    });\n    characterHandler(event);\n  }, [descendants, focusedIndex, onCharacterPress, onClose, setFocusedIndex]);\n  var hasBeenOpened = React.useRef(false);\n\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n\n  var shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy,\n    lazyBehavior,\n    isSelected: isOpen\n  });\n  return _extends({}, props, {\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: _extends({}, props.style, {\n      transformOrigin: \"var(--popper-transform-origin)\"\n    }),\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\nexport function useMenuPositioner(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    popper,\n    isOpen\n  } = useMenuContext();\n  return popper.getPopperProps(_extends({}, props, {\n    style: _extends({\n      visibility: isOpen ? \"visible\" : \"hidden\"\n    }, props.style)\n  }));\n}\nexport function useMenuItem(props, externalRef) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onClick\", \"isDisabled\", \"isFocusable\", \"closeOnSelect\"]);\n\n  var menu = useMenuContext();\n  var {\n    domContext,\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen\n  } = menu;\n  var ref = React.useRef(null);\n  var id = \"menuitem-\" + useId();\n  /**\n   * Register the menuitem's node into the domContext\n   */\n\n  var index = useDescendant({\n    element: ref.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable\n  });\n  var onMouseEnter = React.useCallback(event => {\n    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);\n  var onMouseMove = React.useCallback(event => {\n    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);\n\n    if (ref.current && !isActiveElement(ref.current)) {\n      onMouseEnter(event);\n    }\n  }, [onMouseEnter, onMouseMoveProp]);\n  var onMouseLeave = React.useCallback(event => {\n    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);\n  var onClick = React.useCallback(event => {\n    onClickProp == null ? void 0 : onClickProp(event);\n    /**\n     * Close menu and parent menus, allowing the MenuItem\n     * to override its parent menu's `closeOnSelect` prop.\n     */\n\n    if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]);\n  var isFocused = index === focusedIndex;\n  var trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(() => {\n    if (!isOpen) return;\n\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current, {\n        nextTick: true\n      });\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      focus(menuRef.current);\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen]);\n  var clickableProps = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(ref, externalRef),\n    isDisabled,\n    isFocusable\n  });\n  return _extends({}, htmlProps, clickableProps, {\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  });\n}\nexport function useMenuOption(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (ref === void 0) {\n    ref = null;\n  }\n\n  var {\n    type = \"radio\",\n    isChecked\n  } = props,\n      menuItemProps = _objectWithoutPropertiesLoose(props, [\"type\", \"isChecked\"]);\n\n  var ownProps = useMenuItem(menuItemProps, ref);\n  return _extends({}, ownProps, {\n    role: \"menuitem\" + type,\n    \"aria-checked\": isChecked\n  });\n}\nexport function useMenuOptionGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"children\", \"type\", \"value\", \"defaultValue\", \"onChange\"]);\n\n  var isRadio = type === \"radio\";\n  var fallback = isRadio ? \"\" : [];\n  var [value, setValue] = useControllableState({\n    defaultValue: defaultValue != null ? defaultValue : fallback,\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  var onChange = React.useCallback(selectedValue => {\n    if (type === \"radio\" && isString(value)) {\n      setValue(selectedValue);\n    }\n\n    if (type === \"checkbox\" && isArray(value)) {\n      var nextValue = value.includes(selectedValue) ? removeItem(value, selectedValue) : addItem(value, selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(child => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if (child.type.id !== \"MenuItemOption\") return child;\n\n    var onClick = event => {\n      onChange(child.props.value);\n      child.props.onClick == null ? void 0 : child.props.onClick(event);\n    };\n\n    var isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return /*#__PURE__*/React.cloneElement(child, {\n      type,\n      onClick,\n      isChecked\n    });\n  });\n  return _extends({}, htmlProps, {\n    children: clones\n  });\n}\nexport function useMenuState() {\n  var {\n    isOpen,\n    onClose\n  } = useMenuContext();\n  return {\n    isOpen,\n    onClose\n  };\n}","map":{"version":3,"sources":["../../src/use-menu.ts"],"names":["createContext","strict","name","props","closeOnSelect","closeOnBlur","autoSelect","isOpen","onClose","onOpen","placement","lazyBehavior","popperProps","onToggle","useDisclosure","onOpenProp","menuRef","React","buttonRef","useOutsideClick","ref","handler","event","popper","usePopper","domContext","useDescendants","useUpdateEffect","setFocusedIndex","useFocusOnHide","focusRef","visible","shouldFocus","useIds","openAndFocusMenu","focus","nextTick","openAndFocusFirstItem","openAndFocusLastItem","refocus","doc","getOwnerDocument","hasFocusWithin","shouldRefocus","el","onTransitionEnd","forceUpdate","orientation","externalRef","menu","useMenuContext","onClick","action","onKeyDown","eventKey","normalizeEventKey","keyMap","Enter","ArrowDown","ArrowUp","mergeRefs","id","dataAttr","callAllHandlers","descendants","onCharacterPress","useShortcut","preventDefault","Tab","Escape","nextIndex","getNextIndex","prevIndex","getPrevIndex","fn","characterHandler","character","nextItem","getNextItemFromSearch","node","index","hasBeenOpened","shouldRenderChildren","determineLazyBehavior","hasBeenSelected","isSelected","children","tabIndex","role","style","transformOrigin","visibility","onMouseEnter","onMouseMove","onMouseLeave","htmlProps","useId","useDescendant","element","context","disabled","focusable","isFocusable","onMouseEnterProp","onMouseMoveProp","isActiveElement","onMouseLeaveProp","onClickProp","isFocused","trulyDisabled","isDisabled","clickableProps","useClickable","type","isChecked","menuItemProps","ownProps","useMenuItem","value","onChange","onChangeProp","isRadio","fallback","useControllableState","defaultValue","selectedValue","isString","setValue","isArray","nextValue","removeItem","addItem","validChildren","getValidChildren","clones","child"],"mappings":"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","sourcesContent":["import { useClickable } from \"@chakra-ui/clickable\"\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useDisclosure,\n  UseDisclosureProps,\n  useFocusOnHide,\n  useId,\n  useIds,\n  useOutsideClick,\n  useShortcut,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  createContext,\n  EventKeyMap,\n  getValidChildren,\n  mergeRefs,\n} from \"@chakra-ui/react-utils\"\nimport {\n  addItem,\n  callAllHandlers,\n  dataAttr,\n  determineLazyBehavior,\n  focus,\n  getNextIndex,\n  getNextItemFromSearch,\n  getOwnerDocument,\n  getPrevIndex,\n  isActiveElement,\n  isArray,\n  isString,\n  LazyBehavior,\n  normalizeEventKey,\n  removeItem,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nconst [MenuProvider, useMenuContext] = createContext<UseMenuReturn>({\n  strict: false,\n  name: \"MenuContext\",\n})\n\nexport { MenuProvider, useMenuContext }\n\nexport interface UseMenuProps extends UsePopperProps, UseDisclosureProps {\n  /**\n   * If `true`, the menu will close when a menu item is\n   * clicked\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n  /**\n   * If `true`, the menu will close when you click outside\n   * the menu list\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the first enabled menu item will receive focus and be selected\n   * when the menu opens.\n   *\n   * @default true\n   */\n  autoSelect?: boolean\n  /**\n   * Performance 🚀:\n   * If `true`, the MenuItem rendering will be deferred\n   * until the menu is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of menu's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The menu's content is always unmounted when not open.\n   * - \"keepMounted\": The menu's content initially unmounted,\n   * but stays mounted when menu is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyBehavior\n}\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\nexport function useMenu(props: UseMenuProps = {}) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\",\n    ...popperProps\n  } = props\n\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n  })\n\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  const menuRef = React.useRef<HTMLDivElement>(null)\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n  useOutsideClick({\n    ref: menuRef,\n    handler: (event) => {\n      if (\n        isOpen &&\n        closeOnBlur &&\n        !buttonRef.current?.contains(event.target as HTMLElement)\n      ) {\n        onClose()\n      }\n    },\n  })\n\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n  const popper = usePopper({\n    ...popperProps,\n    placement,\n  })\n\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  /**\n   * Context to register all menu item nodes\n   */\n  const domContext = useDescendants<HTMLDivElement, {}>()\n\n  /**\n   * Focus the button when we close the menu\n   */\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1)\n    }\n  }, [isOpen])\n\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true,\n  })\n\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`)\n\n  const openAndFocusMenu = React.useCallback(() => {\n    onOpen()\n    focus(menuRef.current, { nextTick: true })\n  }, [onOpen, menuRef])\n\n  const openAndFocusFirstItem = React.useCallback(() => {\n    onOpen()\n    setFocusedIndex(0)\n  }, [onOpen, setFocusedIndex])\n\n  const openAndFocusLastItem = React.useCallback(() => {\n    onOpen()\n    setFocusedIndex(domContext.descendants.length - 1)\n  }, [onOpen, setFocusedIndex, domContext.descendants])\n\n  const refocus = React.useCallback(() => {\n    const doc = getOwnerDocument(menuRef.current)\n    const hasFocusWithin = menuRef.current?.contains(doc.activeElement)\n    const shouldRefocus = isOpen && !hasFocusWithin\n\n    if (!shouldRefocus) return\n\n    const el = domContext.descendants[focusedIndex]?.element\n    focus(el)\n  }, [isOpen, focusedIndex, domContext.descendants])\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    domContext,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior,\n  }\n}\n\nexport interface UseMenuReturn extends ReturnType<typeof useMenu> {}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\n\nexport interface UseMenuButtonProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\nexport function useMenuButton(\n  props: UseMenuButtonProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  const {\n    isOpen,\n    onClose,\n    autoSelect,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    openAndFocusMenu,\n  } = menu\n\n  const onClick = React.useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      const action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu\n      action()\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu])\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        Enter: openAndFocusFirstItem,\n        ArrowDown: openAndFocusFirstItem,\n        ArrowUp: openAndFocusLastItem,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [openAndFocusFirstItem, openAndFocusLastItem],\n  )\n\n  return {\n    ...props,\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\" as React.AriaAttributes[\"aria-haspopup\"],\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\n\nexport interface UseMenuListProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\nexport function useMenuList(\n  props: UseMenuListProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  if (!menu) {\n    throw new Error(\n      `useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`,\n    )\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    domContext: { descendants },\n    isLazy,\n    lazyBehavior,\n  } = menu\n\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n  const onCharacterPress = useShortcut({\n    preventDefault: (event) => event.key !== \" \",\n  })\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Tab: (event) => {\n          event.preventDefault()\n        },\n        Escape: onClose,\n        ArrowDown: () => {\n          const nextIndex = getNextIndex(focusedIndex, descendants.length)\n          setFocusedIndex(nextIndex)\n        },\n        ArrowUp: () => {\n          const prevIndex = getPrevIndex(focusedIndex, descendants.length)\n          setFocusedIndex(prevIndex)\n        },\n      }\n\n      const fn = keyMap[eventKey]\n\n      if (fn) {\n        event.preventDefault()\n        fn(event)\n        return\n      }\n\n      const characterHandler = onCharacterPress((character) => {\n        /**\n         * Typeahead: Based on current character pressed,\n         * find the next item to be selected\n         */\n        const nextItem = getNextItemFromSearch(\n          descendants,\n          character,\n          (node) => node.element?.textContent || \"\",\n          descendants[focusedIndex],\n        )\n\n        if (nextItem) {\n          const index = descendants.indexOf(nextItem)\n          setFocusedIndex(index)\n        }\n      })\n\n      characterHandler(event)\n    },\n    [descendants, focusedIndex, onCharacterPress, onClose, setFocusedIndex],\n  )\n\n  const hasBeenOpened = React.useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy,\n    lazyBehavior,\n    isSelected: isOpen,\n  })\n\n  return {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: \"var(--popper-transform-origin)\",\n    },\n    \"aria-orientation\": \"vertical\" as React.AriaAttributes[\"aria-orientation\"],\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nexport function useMenuPositioner(props: any = {}) {\n  const { popper, isOpen } = useMenuContext()\n  return popper.getPopperProps({\n    ...props,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props.style,\n    },\n  })\n}\n\nexport interface UseMenuItemProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {\n  isDisabled?: boolean\n  isFocusable?: boolean\n  /**\n   * Overrides the parent menu's `closeOnSelect` prop.\n   */\n  closeOnSelect?: boolean\n}\n\nexport function useMenuItem(\n  props: UseMenuItemProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect,\n    ...htmlProps\n  } = props\n\n  const menu = useMenuContext()\n\n  const {\n    domContext,\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n  } = menu\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const id = `menuitem-${useId()}`\n\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  const index = useDescendant({\n    element: ref.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable,\n  })\n\n  const onMouseEnter = React.useCallback(\n    (event) => {\n      onMouseEnterProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, index, isDisabled, onMouseEnterProp],\n  )\n\n  const onMouseMove = React.useCallback(\n    (event) => {\n      onMouseMoveProp?.(event)\n      if (ref.current && !isActiveElement(ref.current)) {\n        onMouseEnter(event)\n      }\n    },\n    [onMouseEnter, onMouseMoveProp],\n  )\n\n  const onMouseLeave = React.useCallback(\n    (event) => {\n      onMouseLeaveProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(-1)\n    },\n    [setFocusedIndex, isDisabled, onMouseLeaveProp],\n  )\n\n  const onClick = React.useCallback(\n    (event: React.MouseEvent) => {\n      onClickProp?.(event)\n      /**\n       * Close menu and parent menus, allowing the MenuItem\n       * to override its parent menu's `closeOnSelect` prop.\n       */\n      if (closeOnSelect ?? menuCloseOnSelect) {\n        onClose()\n      }\n    },\n    [onClose, onClickProp, menuCloseOnSelect, closeOnSelect],\n  )\n\n  const isFocused = index === focusedIndex\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  useUpdateEffect(() => {\n    if (!isOpen) return\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current, { nextTick: true })\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      focus(menuRef.current)\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen])\n\n  const clickableProps = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(ref, externalRef),\n    isDisabled,\n    isFocusable,\n  })\n\n  return {\n    ...htmlProps,\n    ...clickableProps,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1,\n  }\n}\n\nexport interface UseMenuOptionOptions {\n  value?: string\n  isChecked?: boolean\n  type?: \"radio\" | \"checkbox\"\n  children?: React.ReactNode\n}\n\nexport interface UseMenuOptionProps\n  extends UseMenuItemProps,\n    UseMenuOptionOptions {}\n\nexport function useMenuOption(\n  props: UseMenuOptionProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { type = \"radio\", isChecked, ...menuItemProps } = props\n  const ownProps = useMenuItem(menuItemProps, ref)\n  return {\n    ...ownProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked as React.AriaAttributes[\"aria-checked\"],\n  }\n}\n\nexport interface UseMenuOptionGroupProps {\n  value?: string | string[]\n  defaultValue?: string | string[]\n  type?: \"radio\" | \"checkbox\"\n  onChange?: (value: string | string[]) => void\n  children?: React.ReactNode\n}\n\nexport function useMenuOptionGroup(props: UseMenuOptionGroupProps = {}) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props\n\n  const isRadio = type === \"radio\"\n\n  const fallback = isRadio ? \"\" : []\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue ?? fallback,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  const onChange = React.useCallback(\n    (selectedValue: string) => {\n      if (type === \"radio\" && isString(value)) {\n        setValue(selectedValue)\n      }\n\n      if (type === \"checkbox\" && isArray(value)) {\n        const nextValue = value.includes(selectedValue)\n          ? removeItem(value, selectedValue)\n          : addItem(value, selectedValue)\n\n        setValue(nextValue)\n      }\n    },\n    [value, setValue, type],\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child) => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if ((child.type as any).id !== \"MenuItemOption\") return child\n\n    const onClick = (event: MouseEvent) => {\n      onChange(child.props.value)\n      child.props.onClick?.(event)\n    }\n\n    const isChecked =\n      type === \"radio\"\n        ? child.props.value === value\n        : value.includes(child.props.value)\n\n    return React.cloneElement(child, {\n      type,\n      onClick,\n      isChecked,\n    })\n  })\n\n  return {\n    ...htmlProps,\n    children: clones,\n  }\n}\n\nexport function useMenuState() {\n  const { isOpen, onClose } = useMenuContext()\n  return { isOpen, onClose }\n}\n"]},"metadata":{},"sourceType":"module"}